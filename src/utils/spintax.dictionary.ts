// src/utils/spintax.helper.ts (–ø—Ä–∏–º–µ—Ä —Ñ–∞–π–ª–∞)

// src/utils/spintax.dictionary.ts (–û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)

export const variationsDictionary: { [key: string]: string } = {
  // --- –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è ---
  –ü—Ä–∏–≤–µ—Ç: '{–ü—Ä–∏–≤–µ—Ç|–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ|–î–æ–±—Ä—ã–π –¥–µ–Ω—å}',
  –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ: '{–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ|–î–æ–±—Ä—ã–π –¥–µ–Ω—å|–î–æ–±—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫}',
  '–î–æ–±—Ä—ã–π –¥–µ–Ω—å': '{–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ|–î–æ–±—Ä—ã–π –¥–µ–Ω—å}',

  // --- –û–±—Ä–∞—â–µ–Ω–∏—è ---
  —É–≤–∞–∂–∞–µ–º—ã–π: '{—É–≤–∞–∂–∞–µ–º—ã–π|–¥–æ—Ä–æ–≥–æ–π}',
  –¥–æ—Ä–æ–≥–æ–π: '{—É–≤–∞–∂–∞–µ–º—ã–π|–¥–æ—Ä–æ–≥–æ–π}',
  –∫–ª–∏–µ–Ω—Ç: '{–∫–ª–∏–µ–Ω—Ç|—É—á–∞—Å—Ç–Ω–∏–∫}',

  // --- –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è ---
  '–ü—Ä–∏–≥–ª–∞—à–∞–µ–º –≤–∞—Å –ø—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ':
    '{–ü—Ä–∏–≥–ª–∞—à–∞–µ–º –≤–∞—Å –ø—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ|–ü—Ä–∏–≥–ª–∞—à–∞–µ–º –∫ —É—á–∞—Å—Ç–∏—é|–ü—Ä–∏–≥–ª–∞—à–∞–µ–º –≤–∞—Å|–ñ–¥–µ–º –≤–∞—Å –Ω–∞}',
  '–ü—Ä–∏–≥–ª–∞—à–∞–µ–º –∫ —É—á–∞—Å—Ç–∏—é':
    '{–ü—Ä–∏–≥–ª–∞—à–∞–µ–º –≤–∞—Å –ø—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ|–ü—Ä–∏–≥–ª–∞—à–∞–µ–º –∫ —É—á–∞—Å—Ç–∏—é|–ü—Ä–∏–≥–ª–∞—à–∞–µ–º –≤–∞—Å}',

  // --- –°–æ–±—ã—Ç–∏—è/–î–µ–π—Å—Ç–≤–∏—è ---
  –ê–∫—Ü–∏—è: '{–ê–∫—Ü–∏—è|–°–ø–µ—Ü–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ|–†–∞—Å–ø—Ä–æ–¥–∞–∂–∞}',
  –°–ø–µ—Ü–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ: '{–ê–∫—Ü–∏—è|–°–ø–µ—Ü–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ|–†–∞—Å–ø—Ä–æ–¥–∞–∂–∞}',
  –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏: '{–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏|—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–∏|–ø–æ–∫—É–ø–∫–µ}',
  –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å: '{–∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å|—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞—Ç—å|–∫—É–ø–∏—Ç—å|–ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏}',
  '–ü—Ä–∏—ë–º –∑–∞—è–≤–æ–∫': '{–ü—Ä–∏—ë–º –∑–∞—è–≤–æ–∫|–°–±–æ—Ä –∑–∞—è–≤–æ–∫|–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è|–ò–¥—ë—Ç –Ω–∞–±–æ—Ä}',
  '–ü—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è –ø—Ä–∏—ë–º –∑–∞—è–≤–æ–∫':
    '{–ü—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è –ø—Ä–∏—ë–º –∑–∞—è–≤–æ–∫|–ò–¥—ë—Ç —Å–±–æ—Ä –∑–∞—è–≤–æ–∫|–û—Ç–∫—Ä—ã—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è|–ü—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è –Ω–∞–±–æ—Ä}',
  '–ü—Ä–æ–¥–ª—ë–Ω –ø—Ä–∏—ë–º –∑–∞—è–≤–æ–∫':
    '{–ü—Ä–æ–¥–ª—ë–Ω –ø—Ä–∏—ë–º –∑–∞—è–≤–æ–∫|–°—Ä–æ–∫ –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–æ–∫ –ø—Ä–æ–¥–ª—ë–Ω|–ï—â—ë –µ—Å—Ç—å –≤—Ä–µ–º—è –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É}',
  —Å–æ—Å—Ç–æ–∏—Ç—Å—è: '{—Å–æ—Å—Ç–æ–∏—Ç—Å—è|–ø—Ä–æ–π–¥—ë—Ç|–±—É–¥–µ—Ç –ø—Ä–æ—Ö–æ–¥–∏—Ç—å}',
  –ù–∞–ø–æ–º–∏–Ω–∞–µ–º: '{–ù–∞–ø–æ–º–∏–Ω–∞–µ–º|–ù–µ –∑–∞–±—É–¥—å—Ç–µ|–ü–æ–º–Ω–∏—Ç–µ|–•–æ—Ç–∏–º –Ω–∞–ø–æ–º–Ω–∏—Ç—å}',
  –æ–±—ä–µ–¥–∏–Ω–∏—Ç: '{–æ–±—ä–µ–¥–∏–Ω–∏—Ç|—Å–æ–±–µ—Ä—ë—Ç|–ø—Ä–∏–≤–ª–µ—á—ë—Ç}',
  '–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–æ—Å—Ç–∞': '{–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–æ—Å—Ç–∞|—Ä–∞–∑–≤–∏—Ç–∏—è –Ω–∞–≤—ã–∫–æ–≤}',
  '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏ –ø—Ä–æ–¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è':
    '{–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏ –ø—Ä–æ–¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è|–ü–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è|–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏ –ø—Ä–æ—è–≤–∏—Ç—å —Å–µ–±—è}',
  '–ü—Ä–æ–¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–∏ —Ç–∞–ª–∞–Ω—Ç—ã':
    '{–ü—Ä–æ–¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–∏ —Ç–∞–ª–∞–Ω—Ç—ã|–ü–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ–∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏|–í—ã—Å—Ç—É–ø–∏—Ç—å –Ω–∞ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–π —Å—Ü–µ–Ω–µ}',
  '–ü—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç—å —Å–≤–æ—é —Å—Ç—Ä–∞–Ω—É':
    '{–ü—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç—å —Å–≤–æ—é —Å—Ç—Ä–∞–Ω—É|–í—ã—Å—Ç—É–ø–∏—Ç—å –∑–∞ —Å–≤–æ—é —Å—Ç—Ä–∞–Ω—É|–ü—Ä–µ–¥—Å—Ç–∞–≤–ª—è—Ç—å —Å–≤–æ—é —Å—Ç—Ä–∞–Ω—É}',
  '–ü–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ –∏–∑ –¥—Ä—É–≥–∏—Ö —Å—Ç—Ä–∞–Ω':
    '{–ü–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ –∏–∑ –¥—Ä—É–≥–∏—Ö —Å—Ç—Ä–∞–Ω|–ù–∞–π—Ç–∏ –Ω–æ–≤—ã—Ö –¥—Ä—É–∑–µ–π —Å–æ –≤—Å–µ–≥–æ –º–∏—Ä–∞|–û–±–º–µ–Ω—è—Ç—å—Å—è –æ–ø—ã—Ç–æ–º —Å –∫–æ–ª–ª–µ–≥–∞–º–∏ –∏–∑ –¥—Ä—É–≥–∏—Ö —Å—Ç—Ä–∞–Ω|–ó–∞–≤–µ—Å—Ç–∏ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–µ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞}',

  // --- –ú–µ—Å—Ç–∞/–û–±—ä–µ–∫—Ç—ã ---
  —Å—Ç–æ–∏–º–æ—Å—Ç—å: '{—Å—Ç–æ–∏–º–æ—Å—Ç—å|—Ü–µ–Ω–∞}',
  —Ü–µ–Ω–∞: '{—Å—Ç–æ–∏–º–æ—Å—Ç—å|—Ü–µ–Ω–∞}',
  –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è: '{–ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è|—Ä–∞–∑–º–µ—â–µ–Ω–∏—è|–ø—Ä–µ–±—ã–≤–∞–Ω–∏—è}',
  –û—Ç–µ–ª—å: '{–û—Ç–µ–ª—å|–ì–æ—Å—Ç–∏–Ω–∏—Ü–∞}',
  –ì–æ—Å—Ç–∏–Ω–∏—Ü–∞: '{–û—Ç–µ–ª—å|–ì–æ—Å—Ç–∏–Ω–∏—Ü–∞}',
  –æ—Ç–µ–ª–∏: '{–æ—Ç–µ–ª–∏|–≤–∞—Ä–∏–∞–Ω—Ç—ã —Ä–∞–∑–º–µ—â–µ–Ω–∏—è|–Ω–æ–º–µ—Ä–∞ –≤ –≥–æ—Å—Ç–∏–Ω–∏—Ü–∞—Ö|–ª—É—á—à–∏–µ –≥–æ—Å—Ç–∏–Ω–∏—Ü—ã}',
  –Ω–æ–º–µ—Ä–∞: '{–Ω–æ–º–µ—Ä–∞|–∫–æ–º–Ω–∞—Ç—ã|–∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç—ã}',
  –ü–∞–∫–µ—Ç: '{–ü–∞–∫–µ—Ç|–í–∞—Ä–∏–∞–Ω—Ç|–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ}',
  –æ—Ä–≥–∫–æ–º–∏—Ç–µ—Ç: '{–æ—Ä–≥–∫–æ–º–∏—Ç–µ—Ç|–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã–π –∫–æ–º–∏—Ç–µ—Ç}',

  // --- –î–µ—Ç–∞–ª–∏ ---
  –º–µ–Ω–µ–¥–∂–µ—Ä–∞: '{–º–µ–Ω–µ–¥–∂–µ—Ä–∞|—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞|–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞|–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞}',
  –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è: '{–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è|–ø–æ —ç—Ç–æ–º—É –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é}',
  —Å—Ä–æ–∫: '{—Å—Ä–æ–∫|–¥–µ–¥–ª–∞–π–Ω|–∫—Ä–∞–π–Ω–∏–π —Å—Ä–æ–∫}',
  –∑–∞—è–≤–æ–∫: '{–∑–∞—è–≤–æ–∫|—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π|–∞–Ω–∫–µ—Ç}',
  –≤—Ö–æ–¥–∏—Ç: '{–≤—Ö–æ–¥–∏—Ç|–≤–∫–ª—é—á–µ–Ω–æ|—Å–æ–¥–µ—Ä–∂–∏—Ç}',
  '–ø–∏—Ç–∞–Ω–∏–µ-–∑–∞–≤—Ç—Ä–∞–∫–∏': '{–ø–∏—Ç–∞–Ω–∏–µ-–∑–∞–≤—Ç—Ä–∞–∫–∏|–∑–∞–≤—Ç—Ä–∞–∫–∏|—É—Ç—Ä–µ–Ω–Ω–µ–µ –ø–∏—Ç–∞–Ω–∏–µ}',
  '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –æ–ø–ª–∞—á–∏–≤–∞–µ—Ç—Å—è':
    '{–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –æ–ø–ª–∞—á–∏–≤–∞–µ—Ç—Å—è|–û—Ç–¥–µ–ª—å–Ω–æ –æ–ø–ª–∞—á–∏–≤–∞–µ—Ç—Å—è|–ù–µ –≤–∫–ª—é—á–µ–Ω–æ –≤ —Å—Ç–æ–∏–º–æ—Å—Ç—å}',
  –û—Ä–≥–≤–∑–Ω–æ—Å: '{–û—Ä–≥–≤–∑–Ω–æ—Å|–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã–π –≤–∑–Ω–æ—Å|–í–∑–Ω–æ—Å –∑–∞ —É—á–∞—Å—Ç–∏–µ}',
  –ø–µ—Ä–µ–ª–µ—Ç: '{–ø–µ—Ä–µ–ª–µ—Ç|–∞–≤–∏–∞–±–∏–ª–µ—Ç—ã|–±–∏–ª–µ—Ç—ã –Ω–∞ —Å–∞–º–æ–ª—ë—Ç}',
  —Å—Ç—Ä–∞—Ö–æ–≤–∫–∞: '{—Å—Ç—Ä–∞—Ö–æ–≤–∫–∞|–º–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è —Å—Ç—Ä–∞—Ö–æ–≤–∫–∞}',
  –ø—Ä–µ–¥–æ–ø–ª–∞—Ç–∞: '{–ø—Ä–µ–¥–æ–ø–ª–∞—Ç–∞|–∞–≤–∞–Ω—Å|–ø–µ—Ä–≤—ã–π –≤–∑–Ω–æ—Å}',
  '–æ—Å—Ç–∞–ª—å–Ω–∞—è –æ–ø–ª–∞—Ç–∞':
    '{–æ—Å—Ç–∞–ª—å–Ω–∞—è –æ–ø–ª–∞—Ç–∞|–æ—Å—Ç–∞—Ç–æ–∫ —Å—É–º–º—ã|–ø–æ–ª–Ω–∞—è –æ–ø–ª–∞—Ç–∞|–æ—Å—Ç–∞–≤—à–∞—è—Å—è —á–∞—Å—Ç—å}',
  '–æ—á–Ω–æ–µ —É—á–∞—Å—Ç–∏–µ': '{–æ—á–Ω–æ–µ —É—á–∞—Å—Ç–∏–µ|–æ—á–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç}',
  '–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤':
    '{–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤|–ö—Ç–æ –º–æ–∂–µ—Ç —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å|–£—á–∞—Å—Ç–Ω–∏–∫–∏}',
  –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è: '{–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è|–î–∏—Å—Ü–∏–ø–ª–∏–Ω—ã|–ù–æ–º–∏–Ω–∞—Ü–∏–∏}',
  '–Ø–∑—ã–∫–∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è': '{–Ø–∑—ã–∫–∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è|–†–∞–±–æ—á–∏–µ —è–∑—ã–∫–∏}',
  –ü–æ–¥—Ä–æ–±–Ω–µ–µ: '{–ü–æ–¥—Ä–æ–±–Ω–µ–µ|–î–µ—Ç–∞–ª–∏|–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è}',
  '–≤ –ø–æ–ª–æ–∂–µ–Ω–∏–∏': '{–≤ –ø–æ–ª–æ–∂–µ–Ω–∏–∏|–≤ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–º –ø–æ–ª–æ–∂–µ–Ω–∏–∏|–Ω–∞ —Å–∞–π—Ç–µ}',
  '–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º': '{–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º|–° –≤–æ–ø—Ä–æ—Å–∞–º–∏|–ï—Å–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã}',
  '–º—ã —Å —Ä–∞–¥–æ—Å—Ç—å—é –≤–∞–º –ø–æ–º–æ–∂–µ–º!':
    '{–º—ã —Å —Ä–∞–¥–æ—Å—Ç—å—é –≤–∞–º –ø–æ–º–æ–∂–µ–º!|–æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å!|–ø–∏—à–∏—Ç–µ/–∑–≤–æ–Ω–∏—Ç–µ!|—Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏!}',
  '–° —É–≤–∞–∂–µ–Ω–∏–µ–º': '{–° —É–≤–∞–∂–µ–Ω–∏–µ–º|–° –Ω–∞–∏–ª—É—á—à–∏–º–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è–º–∏}',

  // --- –ß–∏—Å–ª–∞/–¶–µ–Ω—ã ---
  '350$': '{350$|350 –¥–æ–ª–ª–∞—Ä–æ–≤}',
  '300$': '{300$|300 –¥–æ–ª–ª–∞—Ä–æ–≤}',
  '450$': '{450$|450 –¥–æ–ª–ª–∞—Ä–æ–≤}',
  '30%': '{30%|30 –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤}',

  // --- –≠–º–æ–¥–∑–∏/–°–∏–º–≤–æ–ª—ã ---
  'üì¢': '{üì¢|üî•|üéâ|‚ùóÔ∏è|üì£}',
  '‚è≥': '{‚è≥|‚è±Ô∏è|‚ú®|üóìÔ∏è}',
  'ü™Ñ': '{ü™Ñ|üí•|üëç|‚úÖ|üåü}',
  'üîπ': '{üîπ|üî∏|‚ñ™Ô∏è|‚ñ´Ô∏è}',
  '‚úÖ': '{‚úÖ|‚úîÔ∏è|‚û°Ô∏è|‚ûï}',
  'üìå': '{üìå|üìç|üóìÔ∏è}',
  'üîó': '{üîó|üåê|üëâ}',
  'üìû': '{üìû|‚òéÔ∏è}',
  '‚úâÔ∏è': '{‚úâÔ∏è|üìß}',
};

function spinSingleVariation(variationString: string): string {
  if (variationString.startsWith('{') && variationString.endsWith('}')) {
    const optionsString = variationString.slice(1, -1);
    const options = optionsString.split('|');
    if (options.length > 0) {
      return options[Math.floor(Math.random() * options.length)].trim();
    }
  }
  return variationString;
}

export function applyVariations(
  message: string,
  dictionary: { [key: string]: string },
): string {
  let result = message;

  const sortedKeys = Object.keys(dictionary).sort(
    (a, b) => b.length - a.length,
  );

  for (const key of sortedKeys) {
    const variationString = dictionary[key];
    const replacement = spinSingleVariation(variationString);

    const escapedKey = key.replace(/[.*+?^${}()|[\]\\]/g, '\\$&'); // –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤ Regex
    const regex = new RegExp(escapedKey, 'g');

    result = result.replace(regex, replacement);
  }

  return result;
}
