/* eslint-disable @typescript-eslint/no-unsafe-member-access */
/* eslint-disable @typescript-eslint/no-unsafe-call */
/* eslint-disable @typescript-eslint/no-unsafe-assignment */
// src/utils/spintax.helper.ts (пример файла)

// src/utils/spintax.dictionary.ts (Обновленная версия)

export const variationsDictionary: { [key: string]: string } = {
  // --- Приветствия ---
  Привет: '{Привет|Здравствуйте|Добрый день}',
  Здравствуйте: '{Здравствуйте|Добрый день|Доброго времени суток}',
  'Добрый день': '{Здравствуйте|Добрый день}',

  // --- Обращения ---
  уважаемый: '{уважаемый|дорогой}',
  дорогой: '{уважаемый|дорогой}',
  клиент: '{клиент|участник}',

  // --- Приглашения ---
  'Приглашаем вас принять участие':
    '{Приглашаем вас принять участие|Приглашаем к участию|Приглашаем вас|Ждем вас на}',
  'Приглашаем к участию':
    '{Приглашаем вас принять участие|Приглашаем к участию|Приглашаем вас}',

  // --- События/Действия ---
  Акция: '{Акция|Спецпредложение|Распродажа}',
  Спецпредложение: '{Акция|Спецпредложение|Распродажа}',
  бронировании: '{бронировании|резервировании|покупке}',
  забронировать: '{забронировать|резервировать|купить|приобрести}',
  'Приём заявок': '{Приём заявок|Сбор заявок|Регистрация|Идёт набор}',
  'Продолжается приём заявок':
    '{Продолжается приём заявок|Идёт сбор заявок|Открыта регистрация|Продолжается набор}',
  'Продлён приём заявок':
    '{Продлён приём заявок|Срок подачи заявок продлён|Ещё есть время подать заявку}',
  состоится: '{состоится|пройдёт|будет проходить}',
  Напоминаем: '{Напоминаем|Не забудьте|Помните|Хотим напомнить}',
  объединит: '{объединит|соберёт|привлечёт}',
  'профессионального роста': '{профессионального роста|развития навыков}',
  'Проверить и продемонстрировать свои знания':
    '{Проверить и продемонстрировать свои знания|Показать свои знания|Проверить и проявить себя}',
  'Продемонстрировать свои таланты':
    '{Продемонстрировать свои таланты|Показать свои способности|Выступить на международной сцене}',
  'Представить свою страну':
    '{Представить свою страну|Выступить за свою страну|Представлять свою страну}',
  'Познакомиться с участниками из других стран':
    '{Познакомиться с участниками из других стран|Найти новых друзей со всего мира|Обменяться опытом с коллегами из других стран|Завести международные знакомства}',

  // --- Места/Объекты ---
  стоимость: '{стоимость|цена}',
  цена: '{стоимость|цена}',
  проживания: '{проживания|размещения|пребывания}',
  Отель: '{Отель|Гостиница}',
  Гостиница: '{Отель|Гостиница}',
  отели: '{отели|варианты размещения|номера в гостиницах|лучшие гостиницы}',
  номера: '{номера|комнаты|апартаменты}',
  Пакет: '{Пакет|Вариант|Предложение}',
  оргкомитет: '{оргкомитет|организационный комитет}',

  // --- Детали ---
  менеджера: '{менеджера|специалиста|координатора|консультанта}',
  направления: '{направления|по этому направлению}',
  срок: '{срок|дедлайн|крайний срок}',
  заявок: '{заявок|регистраций|анкет}',
  входит: '{входит|включено|содержит}',
  'питание-завтраки': '{питание-завтраки|завтраки|утреннее питание}',
  'Дополнительно оплачивается':
    '{Дополнительно оплачивается|Отдельно оплачивается|Не включено в стоимость}',
  Оргвзнос: '{Оргвзнос|Организационный взнос|Взнос за участие}',
  перелет: '{перелет|авиабилеты|билеты на самолёт}',
  страховка: '{страховка|медицинская страховка}',
  предоплата: '{предоплата|аванс|первый взнос}',
  'остальная оплата':
    '{остальная оплата|остаток суммы|полная оплата|оставшаяся часть}',
  'очное участие': '{очное участие|очный формат}',
  'Категории участников':
    '{Категории участников|Кто может участвовать|Участники}',
  Направления: '{Направления|Дисциплины|Номинации}',
  'Языки проведения': '{Языки проведения|Рабочие языки}',
  Подробнее: '{Подробнее|Детали|Дополнительная информация}',
  'в положении': '{в положении|в официальном положении|на сайте}',
  'По всем вопросам': '{По всем вопросам|С вопросами|Если есть вопросы}',
  'мы с радостью вам поможем!':
    '{мы с радостью вам поможем!|обращайтесь!|пишите/звоните!|свяжитесь с нами!}',
  'С уважением': '{С уважением|С наилучшими пожеланиями}',

  // --- Числа/Цены ---
  '350$': '{350$|350 долларов}',
  '300$': '{300$|300 долларов}',
  '450$': '{450$|450 долларов}',
  '30%': '{30%|30 процентов}',

  // --- Эмодзи/Символы ---
  '📢': '{📢|🔥|🎉|❗️|📣}',
  '⏳': '{⏳|⏱️|✨|🗓️}',
  '🪄': '{🪄|💥|👍|✅|🌟}',
  '🔹': '{🔹|🔸|▪️|▫️}',
  '✅': '{✅|✔️|➡️|➕}',
  '📌': '{📌|📍|🗓️}',
  '🔗': '{🔗|🌐|👉}',
  '📞': '{📞|☎️}',
  '✉️': '{✉️|📧}',
};

function spinSingleVariation(variationString: string): string {
  if (variationString.startsWith('{') && variationString.endsWith('}')) {
    const optionsString = variationString.slice(1, -1);
    const options = optionsString.split('|');
    if (options.length > 0) {
      return options[Math.floor(Math.random() * options.length)].trim();
    }
  }
  return variationString;
}

/**
 * Экранирует специальные символы для использования в RegExp.
 */
function escapeRegExp(string: string): string {
  // Экранирует символы: . * + ? ^ $ { } ( ) | [ ] \
  return string.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
}

/**
 * Обрабатывает inline spintax конструкции {opt1|opt2} в тексте.
 */
function processInlineSpintax(template: string): string {
  const spunText = template;
  const regex = /\{([^}]+?)\}/g; // Нежадный поиск содержимого внутри {}
  let rebuiltString = '';
  let lastIndex = 0;
  let match;

  // Итеративно заменяем, строя новую строку
  while ((match = regex.exec(spunText)) !== null) {
    // Добавляем часть строки до совпадения
    rebuiltString += spunText.substring(lastIndex, match.index);

    const optionsString = match[1]; // Содержимое скобок
    const options = optionsString.split('|');
    if (options.length > 0) {
      // Добавляем случайный вариант
      rebuiltString +=
        options[Math.floor(Math.random() * options.length)].trim();
    } else {
      // Если внутри скобок пусто или некорректно, оставляем как есть
      rebuiltString += match[0];
    }
    // Обновляем индекс для следующего поиска
    lastIndex = regex.lastIndex;
  }
  // Добавляем оставшуюся часть строки после последнего совпадения
  rebuiltString += spunText.substring(lastIndex);

  return rebuiltString;
}

/**
 * Применяет вариации из словаря к тексту сообщения (регистронезависимо).
 */
export function applyVariations(message: string): string {
  let result = message;

  // Сортируем ключи от самых длинных к самым коротким
  const sortedKeys = Object.keys(variationsDictionary).sort(
    (a, b) => b.length - a.length,
  );

  for (const key of sortedKeys) {
    const variationString = variationsDictionary[key];
    // Генерируем *один* случайный вариант для *всех* вхождений этого ключа
    const replacement = spinSingleVariation(variationString);

    try {
      // Экранируем ключ для использования в RegExp
      const escapedKey = escapeRegExp(key);
      // Создаем регистронезависимый ('i') и глобальный ('g') RegExp
      const regex = new RegExp(escapedKey, 'gi');

      // Выполняем замену
      result = result.replace(regex, replacement);
    } catch (e) {
      console.error(`Ошибка при обработке ключа словаря: "${key}"`, e);
    }
  }

  // После замен из словаря обрабатываем оставшиеся inline spintax {..|..}
  result = processInlineSpintax(result);

  return result;
}
